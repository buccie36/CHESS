#include <msp430.h>
#include <stdint.h>

// Bit-banged SPI pin setup using P2.0 (DIN), P2.1 (CLK), P2.2 (LOAD)
#define DATA_PIN  BIT0   // P2.0 -> MAX7219 DIN
#define CLK_PIN   BIT1   // P2.1 -> MAX7219 CLK
#define LOAD_PIN  BIT2   // P2.2 -> MAX7219 LOAD

#define DATA_PORT P2OUT
#define CLK_PORT  P2OUT
#define LOAD_PORT P2OUT

#define DATA_DIR  P2DIR
#define CLK_DIR   P2DIR
#define LOAD_DIR  P2DIR

#define DATA_HIGH()  (DATA_PORT |= DATA_PIN)
#define DATA_LOW()   (DATA_PORT &= ~DATA_PIN)
#define CLK_HIGH()   (CLK_PORT |= CLK_PIN)
#define CLK_LOW()    (CLK_PORT &= ~CLK_PIN)
#define LOAD_HIGH()  (LOAD_PORT |= LOAD_PIN)
#define LOAD_LOW()   (LOAD_PORT &= ~LOAD_PIN)

void sendByte(uint8_t address, uint8_t data);
void sendCommand(uint8_t cmd, uint8_t value);
void initMAX7219(void);
void displayHappyFace(void);
void shortDelay(void);

// Happy face pattern
const uint8_t happy_face[8] = {
    0b00111100,
    0b01000010,
    0b10100101,
    0b10000001,
    0b10100101,
    0b10011001,
    0b01000010,
    0b00111100
};

void main(void)
{
    WDTCTL = WDTPW | WDTHOLD;   // Stop watchdog

    // Set GPIOs as outputs
    DATA_DIR |= DATA_PIN;
    CLK_DIR  |= CLK_PIN;
    LOAD_DIR |= LOAD_PIN;

    // Set outputs low
    DATA_LOW();
    CLK_LOW();
    LOAD_LOW();

    // Unlock GPIOs
    PM5CTL0 &= ~LOCKLPM5;

    // Init display
    initMAX7219();
    displayHappyFace();

    while (1); // Loop forever
}

void shortDelay(void)
{
    __delay_cycles(100); // short delay (adjust if needed)
}

void sendByte(uint8_t address, uint8_t data)
{
    int i;
    // Send address
    for (i = 7; i >= 0; i--) {
        (address & (1 << i)) ? DATA_HIGH() : DATA_LOW();
        CLK_HIGH(); shortDelay();
        CLK_LOW();  shortDelay();
    }
    // Send data
    for (i = 7; i >= 0; i--) {
        (data & (1 << i)) ? DATA_HIGH() : DATA_LOW();
        CLK_HIGH(); shortDelay();
        CLK_LOW();  shortDelay();
    }

    // Load to display
    LOAD_HIGH(); shortDelay();
    LOAD_LOW();  shortDelay();
}

void sendCommand(uint8_t cmd, uint8_t value)
{
    sendByte(cmd, value);
}

void initMAX7219(void)
{
    sendCommand(0x0F, 0x00); // Display test off
    sendCommand(0x0C, 0x01); // Shutdown register: Normal operation
    sendCommand(0x0B, 0x07); // Scan limit = all 8 digits
    sendCommand(0x09, 0x00); // No decode mode
    sendCommand(0x0A, 0x08); // Medium intensity (0â€“15)
}

void displayHappyFace(void)
{
    uint8_t row;
    for (row = 0; row < 8; row++) {
        sendByte(row + 1, happy_face[row]); // MAX7219 rows = 1 to 8
    }
}
