import tkinter as tk
from tkinter import filedialog, messagebox, scrolledtext
from PIL import Image, ImageTk
import chess
import chess.pgn
import chess.engine
import os


class ChessAnalyzerApp:
    def __init__(self, root):
        self.root = root
        self.root.title("Chess Analyzer")

        self.engine = chess.engine.SimpleEngine.popen_uci("stockfish/stockfish-windows-x86-64-avx2.exe")
        self.board = chess.Board()
        self.selected_square = None
        self.piece_images = self.load_piece_images()
        self.move_stack = []
        self.legal_moves_squares = []
        self.display_index = None  # for move navigation

        self.setup_gui()

    def setup_gui(self):
        self.frame = tk.Frame(self.root)
        self.frame.pack(padx=10, pady=10)

        self.board_canvas = tk.Canvas(self.frame, width=400, height=400)
        self.board_canvas.grid(row=0, column=1, rowspan=8, padx=5)
        self.board_canvas.bind("<Button-1>", self.on_board_click)

        self.analysis_area = scrolledtext.ScrolledText(self.frame, width=45, height=20)
        self.analysis_area.grid(row=0, column=2, rowspan=8, padx=10)

        self.analysis_bar = tk.Canvas(self.frame, width=40, height=400, bg="#FFF")
        self.analysis_bar.grid(row=0, column=0, rowspan=8, padx=5)

        self.move_history = scrolledtext.ScrolledText(self.frame, width=45, height=10)
        self.move_history.grid(row=8, column=1, columnspan=2, pady=5)

        tk.Button(self.frame, text="Previous Move", command=self.show_previous_move).grid(row=9, column=0, pady=5)
        tk.Button(self.frame, text="Current Position", command=self.show_current_position).grid(row=9, column=1, pady=5)
        tk.Button(self.frame, text="Load PGN", command=self.load_pgn).grid(row=9, column=2, pady=5)
        tk.Button(self.frame, text="Reset Board", command=self.reset_board).grid(row=10, column=2, pady=5)

        self.refresh_board()

    def load_piece_images(self):
        piece_symbols = {
            "P": "wp.png", "N": "wn.png", "B": "wb.png", "R": "wr.png", "Q": "wq.png", "K": "wk.png",
            "p": "bp.png", "n": "bn.png", "b": "bb.png", "r": "br.png", "q": "bq.png", "k": "bk.png"
        }
        piece_images = {}
        for symbol, filename in piece_symbols.items():
            img = Image.open(f"wp.png")
            piece_images[symbol] = ImageTk.PhotoImage(img.resize((50, 50)))
        return piece_images

    def refresh_board(self):
        self.board_canvas.delete("all")
        for square in chess.SQUARES:
            col, row = chess.square_file(square), chess.square_rank(square)
            x1, y1 = col * 50, (7 - row) * 50
            x2, y2 = x1 + 50, y1 + 50
            color = "#F0D9B5" if (col + row) % 2 == 0 else "#B58863"
            self.board_canvas.create_rectangle(x1, y1, x2, y2, fill=color)

            if square in self.legal_moves_squares:
                self.board_canvas.create_rectangle(x1, y1, x2, y2, fill="#AAF")

            piece = self.board.piece_at(square)
            if piece:
                img = self.piece_images[piece.symbol()]
                self.board_canvas.create_image(x1, y1, anchor=tk.NW, image=img)

    def on_board_click(self, event):
        col = event.x // 50
        row = 7 - (event.y // 50)
        square = chess.square(col, row)

        if self.selected_square is None:
            if self.board.piece_at(square) and self.board.piece_at(square).color == self.board.turn:
                self.selected_square = square
                self.legal_moves_squares = [move.to_square for move in self.board.legal_moves if move.from_square == square]
        else:
            move = chess.Move(self.selected_square, square)
            if move in self.board.legal_moves:
                self.board.push(move)
                self.move_stack.append(move)
                self.display_index = None
                self.selected_square = None
                self.legal_moves_squares = []
                self.refresh_board()
                self.analyze_current_position()
                self.update_move_history()
            else:
                self.selected_square = None
                self.legal_moves_squares = []
        self.refresh_board()

    def analyze_current_position(self):
        self.analysis_area.delete(1.0, tk.END)
        with self.engine.analysis(self.board, chess.engine.Limit(time=0.1)) as analysis:
            for info in analysis:
                if "score" in info:
                    score = info["score"].white().score(mate_score=10000)
                    self.analysis_area.insert(tk.END, f"Evaluation: {score / 100:.2f}\n")
                    self.update_analysis_bar(score / 100)
                if "pv" in info:
                    best_line = " ".join(str(move) for move in info["pv"])
                    self.analysis_area.insert(tk.END, f"Best Line: {best_line}\n")
                    break

    def update_analysis_bar(self, centipawn_score):
        self.analysis_bar.delete("all")
        score = max(min(centipawn_score, 10), -10)
        white_height = int((score + 10) / 20 * 400)
        black_height = 400 - white_height

        self.analysis_bar.create_rectangle(0, 0, 40, black_height, fill="#000000", outline="")
        self.analysis_bar.create_rectangle(0, black_height, 40, 400, fill="#FFFFFF", outline="")
        self.analysis_bar.create_text(20, 10, text="Black", fill="#FFF", anchor=tk.N)
        self.analysis_bar.create_text(20, 390, text="White", fill="#000", anchor=tk.S)

    def update_move_history(self):
        self.move_history.delete(1.0, tk.END)
        move_list = list(self.board.move_stack)
        lines = []
        for i in range(0, len(move_list), 2):
            move_text = f"{i//2 + 1}. {move_list[i]}"
            if i + 1 < len(move_list):
                move_text += f" {move_list[i+1]}"
            lines.append(move_text)
        self.move_history.insert(tk.END, "\n".join(lines))

    def load_pgn(self):
        path = filedialog.askopenfilename(filetypes=[("PGN Files", "*.pgn")])
        if not path:
            return
        with open(path, "r") as f:
            game = chess.pgn.read_game(f)
            self.board = game.board()
            for move in game.mainline_moves():
                self.board.push(move)
        self.refresh_board()
        self.analyze_current_position()
        self.update_move_history()

    def reset_board(self):
        self.board.reset()
        self.move_stack.clear()
        self.display_index = None
        self.legal_moves_squares = []
        self.refresh_board()
        self.analysis_area.delete(1.0, tk.END)
        self.move_history.delete(1.0, tk.END)
        self.update_analysis_bar(0)

    def show_previous_move(self):
        if self.display_index is None:
            self.display_index = len(self.board.move_stack)
        if self.display_index > 0:
            self.display_index -= 1
            self.board.pop()
            self.refresh_board()
            self.analyze_current_position()
            self.update_move_history()

    def show_current_position(self):
        while self.display_index is not None and self.display_index < len(self.move_stack):
            self.board.push(self.move_stack[self.display_index])
            self.display_index += 1
        self.display_index = None
        self.refresh_board()
        self.analyze_current_position()
        self.update_move_history()

    def on_quit(self):
        self.engine.quit()
        self.root.destroy()


if __name__ == "__main__":
    root = tk.Tk()
    app = ChessAnalyzerApp(root)
    root.protocol("WM_DELETE_WINDOW", app.on_quit)
    root.mainloop()




